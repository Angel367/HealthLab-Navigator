import json

import requests

with open('kdl-moscow-analysis-final.json', 'r', encoding='utf-8') as f:
    data = json.load(f)

research_materials_convert = [{'сыворотка крови': ['Вен. кровь']}, {'биопсийный или операционный материал': ['Биопс./опер. материал', 'Операционный материал', 'Биопс. материал']}, {'кровь': ['Вен. кровь', 'Капилл. кровь', 'Пуповинная кровь']}, {'суточная моча': ['Моча']}, {'кровь с ЭДТА': ['Вен. кровь', 'Капилл. кровь', 'Пуповинная кровь']}, {'моча (разовая порция)': ['Моча']}, {'мазок': ['Соскоб']}, {'мазок из глаза': ['Соскоб']}, {'слюна': ['Слюна']}, {'мокрота, бронхоальвеолярный лаваж': ['Мокрота']}, {'буккальный эпителий': ['Соскоб']}, {'кровь с ЭДТА или костный мозг': ['Вен. кровь', 'Капилл. кровь', 'Пуповинная кровь', 'Костный мозг']}, {'кровь с гепарином': ['Вен. кровь', 'Капилл. кровь', 'Пуповинная кровь']}, {'кал': ['Кал']}, {'мазок (соскоб) цитологический': ['Соскоб', 'Цит. материал']}, {'мазок из носоглотки, мазок из ротоглотки, мазок с поверхности миндалин, мокрота, бронхоальвеолярный лаваж': ['Соскоб', 'Мокрота']}, {'Мазок из урогенитального тракта, эякулят, секрет простаты, секрет простаты в моче': ['Соскоб', 'Сперма', 'Секрет простаты', 'Секрет простаты в моче']}, {'пакет с выдыхаемым воздухом': []}, {'волосы': ['Волосы']}, {'мазок из урогенитального тракта': ['Соскоб']}, {'секрет простаты': ['Секрет простаты']}, {'соскоб кожи': ['Соскоб', 'кожа']}, {'мазок из носа, мазок из ротоглотки': ['Соскоб']}, {'мочевой камень': ['Мочевой камень']}, {'Мазок из урогенитального тракта, аспират из полости матки': ['Соскоб']}, {'кровь с ЭДТА, сыворотка крови': ['Вен. кровь', 'Капилл. кровь', 'Пуповинная кровь']}, {'кровь с цитратом': ['Вен. кровь', 'Капилл. кровь', 'Пуповинная кровь']}, {'кал и соскоб на энтеробиоз': ['Кал', 'Соскоб', 'Кал (соскоб)']}, {'сыворотка крови, кровь с гепарином': ['Вен. кровь', 'Капилл. кровь', 'Пуповинная кровь']}, {'эякулят': ['Сперма']}, {'кровь с апротинином': ['Вен. кровь', 'Капилл. кровь', 'Пуповинная кровь']}, {'кровь с ЭДТА и апротинином': ['Вен. кровь', 'Капилл. кровь', 'Пуповинная кровь']}, {'ногтевые пластинки': ['Ногти']}, {'мазок из носа': ['Соскоб']}, {'смешанный соскоб (цитология)': ['Соскоб', 'Цит. материал']}, {'кровь с фторидом натрия': ['Вен. кровь', 'Капилл. кровь', 'Пуповинная кровь']}, {'кровь с ЭДТА, костный мозг': ['Вен. кровь', 'Капилл. кровь', 'Пуповинная кровь', 'Костный мозг']}, {'сыворотка крови, кровь с гепарином, суточная моча': ['Вен. кровь', 'Капилл. кровь', 'Пуповинная кровь', 'Моча']}, {'мазок из ротоглотки, слюна, бронхоальвеолярный лаваж': ['Соскоб', 'Слюна', 'Мокрота']}, {'мазок из носоглотки, мазок из ротоглотки, мокрота': ['Соскоб', 'Мокрота']}, {'мокрота': ['Мокрота']}, {'парафиновый блок, гистологический препарат (стекло)': ['Парафин. блок', 'Гист. материал']}, {'мазок, моча, мокрота': ['Соскоб', 'Моча', 'Мокрота']}, {'секрет простаты в моче': ['Секрет простаты', 'Моча']}, {'кровь с ЭДТА, ворсины хориона/ткани плода': ['Вен. кровь', 'Капилл. кровь', 'Пуповинная кровь', 'ворсины хориона']}, {'готовый цитологический препарат (стекло)': ['Цит. материал']}, {'асцитическая жидкость': []}, {'желчь': []}, {'пунктат молочной железы': ['Пунктат']}, {'костный мозг': ['Костный мозг']}, {'материал в контейнере с формалином': ['Биопс./опер. материал', 'Операционный материал', 'Биопс. материал']}, {'мазок, моча, мокрота, биологические жидкости': ['Соскоб', 'Моча', 'Мокрота']}, {'парафиновый блок': ['Парафин. блок']}]


founded_count = 0
for analyse in data:
    t = requests.get(f"http://localhost:8000/api/medical-service/?name=&exact_name={analyse['name']}&similar_name=")
    if len(t.json()['results']) > 0:
        founded_count += 1
        continue
    research_materials = []
    for cnv in research_materials_convert:
        for key, value in cnv.items():
            if key == analyse['research_material']:
                research_materials.extend(value)
    research_materials_ids = []
    for research_material in research_materials:
        request = requests.get(f'http://localhost:8000/api/research-material/?name={research_material}').json()['results']
        for research_material1 in request:
            research_materials_ids.append(research_material1['id'])
    government_code_804n = analyse.get('government_code_804n', None)
    if government_code_804n is not None:
        government_code_804n = government_code_804n.split(',')
        good_government_code_804n = []
        for government_code in government_code_804n:
            good_government_code_804n.append(government_code.strip())
    else:
        good_government_code_804n = None
    data_analyze = {
        "status": "confirmed",
        "name": analyse['name'],
        "research_material": research_materials_ids,
        "government_code_804n": good_government_code_804n,
    }
    request = requests.post('http://localhost:8000/api/medical-service/', json=data_analyze)
    print(request)

print(founded_count)
